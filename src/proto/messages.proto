/// Copyright (c) 2017 The Ustore Authors.

package ustore;

/**
 * A message exchanged between the system components.
 * It contains 2 parts: a header and a payload
 *  + Header: key, version, branch, type (and response status, if applicable)
 *  + Payload: each message type has its own payload message
 *
 * The message contains many optional fields, each corresponding to a payload type.
 * Note that when ommited, these fields consume no space.
 *
 * To extend the message: define a new type, and define a new payload inside this object.
 */
message UMessage {
  enum Type {
    PUT_REQUEST = 1;
    GET_REQUEST = 2;
    MERGE_REQUEST = 3;
    LIST_REQUEST = 10;
    EXISTS_REQUEST = 11;
    GET_BRANCH_HEAD_REQUEST = 12;
    IS_BRANCH_HEAD_REQUEST = 13;
    GET_LATEST_VERSION_REQUEST = 14;
    IS_LATEST_VERSION_REQUEST = 15;
    BRANCH_REQUEST = 20;
    RENAME_REQUEST = 21;
    DELETE_REQUEST = 22;
    GET_INFO_REQUEST = 31;
    PUT_CHUNK_REQUEST = 40;
    GET_CHUNK_REQUEST = 41;
    EXISTS_CHUNK_REQUEST = 42;
    RESPONSE = 50;
  }

  required Type type = 1;
  required int32 source = 2;

  optional RequestPayload request_payload = 10;
  optional ValuePayload value_payload = 11;
  optional ResponsePayload response_payload = 12;
  optional InfoPayload info_payload = 13;
}

/**
   * PAYLOAD
   */
message RequestPayload {
  optional bytes key = 1;
  optional bytes version = 2;
  optional bytes branch = 3;
  optional bytes ref_version = 4;
  optional bytes ref_branch = 5;
}

// Value payload is to simulate spec/value class
message ValuePayload {
  optional int32 type = 1;
  optional bytes base = 2;
  optional int32 pos = 3;
  optional int32 dels = 4;
  repeated bytes values = 5;  // vector<Slice> vals
  repeated bytes keys = 6;  // vector<Slice> keys
}

message ResponsePayload {
  required int32 stat = 1;
  optional bytes value = 2;  // bytes value, used for both string and hash
  optional bool bvalue = 3;  // bool value
  repeated bytes lvalue = 4;  // list of bytes
}

message InfoPayload {
  required bytes node_id = 20;

  required int64 chunks = 1;
  required int64 chunk_bytes = 2;
  required int64 valid_chunks = 3;
  required int64 valid_chunk_bytes = 4;
  required int64 max_segments = 5;
  required int64 alloc_segments = 6;
  required int64 free_segments = 7;
  required int64 used_segments = 8;
  repeated int32 chunk_types = 10;
  repeated int64 chunks_per_type = 11;
  repeated int64 bytes_per_type = 12;
}

/**
 * Request for RangeInfo messages, sent by the RequestHandler to the Master
 * If the message is empty, Master is expected to send the entire RangeInfo mapping.
 * Else, the request specifies the key for which the Master responses with the RangeInfo
 * of this range
 */
message RangeRequest {
  optional bytes key = 1;
}

// Response to RangeRequest, contains multiples RangeInfo messages
message RangeResponse {
  repeated RangeInfo range_map = 1;
}

/**
 * RangeInfo: contains the mapping between a key range [start,end) and a
 * worker. For a simple partitioning scheme, RangeInfo is sorted by "start"
 * and the first RangeInfo satisfying "start > key" is the owner.
 */
message RangeInfo {
  // Range
  required bytes start = 1;
  optional bytes end = 2;

  // Worker information
  required string address = 4;
}
