/// Copyright (c) 2017 The Ustore Authors.

package ustore;

/**
 * A message exchanged between the system components.
 * It contains 2 parts: a header and a payload
 *  + Header: key, version, branch, type (and response status, if applicable)
 *  + Payload: each message type has its own payload message
 *
 * The message contains many optional fields, each corresponding to a payload type.
 * Note that when ommited, these fields consume no space.
 *
 * To extend the message: define a new type, and define a new payload inside this object.
 */
message UStoreMessage {
  enum Type {
    PUT_REQUEST = 1;
    PUT_RESPONSE = 2;
    GET_REQUEST = 3;
    GET_RESPONSE = 4;
    BRANCH_REQUEST = 5;
    BRANCH_RESPONSE = 6;
    RENAME_REQUEST = 7;
    RENAME_RESPONSE = 8;
    MERGE_REQUEST = 9;
    MERGE_RESPONSE = 10;
    GET_CHUNK_REQUEST = 11;
    LIST_KEY_REQUEST = 12;
    LIST_BRANCH_REQUEST = 13;
    EXISTS_REQUEST = 14;
    GET_BRANCH_HEAD_REQUEST = 15;
    IS_BRANCH_HEAD_REQUEST = 16;
    GET_LATEST_VERSION_REQUEST = 17;
    IS_LATEST_VERSION_REQUEST = 18;
    DELETE_REQUEST = 19;
    LIST_RESPONSE = 20;
    BOOL_RESPONSE = 21;
    BRANCH_VERSION_RESPONSE = 22;
    DELETE_RESPONSE = 23;
  }

  /**
   * HEADER
   */
  optional Type type = 1;
  // key
  optional bytes key = 2;
  // version
  optional bytes version = 3;
  // branch
  optional bytes branch = 4;
  // status (only for RESPONSE messages)
  optional int32 status = 5;
  // to identify the sending thread
  required int32 source = 15;

  optional PutRequestPayload put_request_payload = 6;
  optional PutResponsePayload put_response_payload = 7;
  optional GetResponsePayload get_response_payload = 8;
  optional BranchRequestPayload branch_request_payload = 9;
  optional RenameRequestPayload rename_request_payload = 10;
  optional MergeRequestPayload merge_request_payload = 11;
  optional MergeResponsePayload merge_response_payload = 12;
  optional BoolResponsePayload bool_response_payload = 13;
  optional MultiVersionResponsePayload multi_version_response_payload = 14;
  optional BranchVersionResponsePayload branch_version_response_payload = 16;
}

/**
   * PAYLOAD
   */
  // PUT_REQUEST payload
message PutRequestPayload {
    //required bytes value = 3;
    required ValuePayload value = 3;
}

  // PUT_RESPONSE payload
message PutResponsePayload {
    required bytes new_version = 1;
}

  // MERGE_RESPONSE payload
message MergeResponsePayload {
    required bytes new_version = 1;
}

  // GET_REQUEST payload - Nothing to do

  // GET_RESPONSE payload
message GetResponsePayload {
    //required bytes value = 1;
    required UCellPayload meta = 1;
}

  // BRANCH_REQUEST
message BranchRequestPayload {
    required bytes new_branch = 1;
}

  // BRANCH_RESPONSE, MOVE_RESPONSE, MERGE_RESPONSE
  // Status field indicates success or failure

  // MOVE_REQUEST
message RenameRequestPayload {
    required bytes new_branch = 1;
}

  // MERGE_REQUEST
message MergeRequestPayload {
    optional bytes ref_branch = 1;
    optional bytes ref_version = 2;
    //required bytes value = 3;
    required ValuePayload value = 3;
}

/**
 * Request for RangeInfo messages, sent by the RequestHandler to the Master
 * If the message is empty, Master is expected to send the entire RangeInfo mapping.
 * Else, the request specifies the key for which the Master responses with the RangeInfo
 * of this range
 */
message RangeRequest {
  optional bytes key = 1;
}

// Response to RangeRequest, contains multiples RangeInfo messages
message RangeResponse {
  repeated RangeInfo range_map = 1;
}

/**
 * RangeInfo: contains the mapping between a key range [start,end) and a
 * worker. For a simple partitioning scheme, RangeInfo is sorted by "start"
 * and the first RangeInfo satisfying "start > key" is the owner.
 */
message RangeInfo {
  // Range
  required bytes start = 1;
  optional bytes end = 2;

  // Worker information
  required string address = 4;
}

message UCellPayload {
  required bytes value = 1;
}

message ValuePayload {
  required int32 type = 1;
  optional bytes base = 2;
  optional int32 pos = 3;
  optional int32 dels = 4;
  repeated bytes values = 5;  // vector<Slice> vals
  repeated bytes keys = 6;  // vector<Slice> keys
}

message MultiVersionResponsePayload {
  repeated bytes versions = 1;
}

message BranchVersionResponsePayload {
  optional bytes version = 2;
}

message BoolResponsePayload {
  required bool value = 3;
}
